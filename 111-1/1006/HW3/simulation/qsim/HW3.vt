// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2022 16:10:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    HW3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HW3_vlg_sample_tst(
	CLK,
	En,
	RST,
	num,
	sampler_tx
);
input  CLK;
input  En;
input  RST;
input [3:0] num;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or En or RST or num)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module HW3_vlg_check_tst (
	Valid,
	out,
	sampler_rx
);
input  Valid;
input [39:0] out;
input sampler_rx;

reg  Valid_expected;
reg [39:0] out_expected;

reg  Valid_prev;
reg [39:0] out_prev;

reg  Valid_expected_prev;
reg [39:0] out_expected_prev;

reg  last_Valid_exp;
reg [39:0] last_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Valid_prev = Valid;
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	Valid_expected_prev = Valid_expected;
	out_expected_prev = out_expected;
end


// expected out[ 39 ]
initial
begin
	out_expected[39] = 1'bX;
	out_expected[39] = #999000 1'b0;
end 
// expected out[ 38 ]
initial
begin
	out_expected[38] = 1'bX;
	out_expected[38] = #999000 1'b0;
end 
// expected out[ 37 ]
initial
begin
	out_expected[37] = 1'bX;
	out_expected[37] = #999000 1'b0;
end 
// expected out[ 36 ]
initial
begin
	out_expected[36] = 1'bX;
	out_expected[36] = #999000 1'b0;
end 
// expected out[ 35 ]
initial
begin
	out_expected[35] = 1'bX;
	out_expected[35] = #999000 1'b0;
end 
// expected out[ 34 ]
initial
begin
	out_expected[34] = 1'bX;
	out_expected[34] = #999000 1'b0;
end 
// expected out[ 33 ]
initial
begin
	out_expected[33] = 1'bX;
	out_expected[33] = #999000 1'b0;
end 
// expected out[ 32 ]
initial
begin
	out_expected[32] = 1'bX;
	out_expected[32] = #999000 1'b0;
end 
// expected out[ 31 ]
initial
begin
	out_expected[31] = 1'bX;
	out_expected[31] = #999000 1'b0;
end 
// expected out[ 30 ]
initial
begin
	out_expected[30] = 1'bX;
	out_expected[30] = #999000 1'b0;
end 
// expected out[ 29 ]
initial
begin
	out_expected[29] = 1'bX;
	out_expected[29] = #999000 1'b0;
end 
// expected out[ 28 ]
initial
begin
	out_expected[28] = 1'bX;
	out_expected[28] = #999000 1'b0;
end 
// expected out[ 27 ]
initial
begin
	out_expected[27] = 1'bX;
	out_expected[27] = #999000 1'b0;
end 
// expected out[ 26 ]
initial
begin
	out_expected[26] = 1'bX;
	out_expected[26] = #999000 1'b0;
end 
// expected out[ 25 ]
initial
begin
	out_expected[25] = 1'bX;
	out_expected[25] = #999000 1'b0;
end 
// expected out[ 24 ]
initial
begin
	out_expected[24] = 1'bX;
	out_expected[24] = #999000 1'b0;
end 
// expected out[ 23 ]
initial
begin
	out_expected[23] = 1'bX;
	out_expected[23] = #999000 1'b0;
end 
// expected out[ 22 ]
initial
begin
	out_expected[22] = 1'bX;
	out_expected[22] = #999000 1'b0;
end 
// expected out[ 21 ]
initial
begin
	out_expected[21] = 1'bX;
	out_expected[21] = #999000 1'b0;
end 
// expected out[ 20 ]
initial
begin
	out_expected[20] = 1'bX;
	out_expected[20] = #999000 1'b0;
end 
// expected out[ 19 ]
initial
begin
	out_expected[19] = 1'bX;
	out_expected[19] = #999000 1'b0;
end 
// expected out[ 18 ]
initial
begin
	out_expected[18] = 1'bX;
	out_expected[18] = #999000 1'b0;
end 
// expected out[ 17 ]
initial
begin
	out_expected[17] = 1'bX;
	out_expected[17] = #999000 1'b0;
end 
// expected out[ 16 ]
initial
begin
	out_expected[16] = 1'bX;
	out_expected[16] = #999000 1'b0;
end 
// expected out[ 15 ]
initial
begin
	out_expected[15] = 1'bX;
	out_expected[15] = #999000 1'b0;
end 
// expected out[ 14 ]
initial
begin
	out_expected[14] = 1'bX;
	out_expected[14] = #999000 1'b0;
end 
// expected out[ 13 ]
initial
begin
	out_expected[13] = 1'bX;
	out_expected[13] = #999000 1'b0;
end 
// expected out[ 12 ]
initial
begin
	out_expected[12] = 1'bX;
	out_expected[12] = #999000 1'b0;
end 
// expected out[ 11 ]
initial
begin
	out_expected[11] = 1'bX;
	out_expected[11] = #999000 1'b0;
end 
// expected out[ 10 ]
initial
begin
	out_expected[10] = 1'bX;
	out_expected[10] = #999000 1'b0;
end 
// expected out[ 9 ]
initial
begin
	out_expected[9] = 1'bX;
	out_expected[9] = #999000 1'b0;
end 
// expected out[ 8 ]
initial
begin
	out_expected[8] = 1'bX;
	out_expected[8] = #999000 1'b0;
end 
// expected out[ 7 ]
initial
begin
	out_expected[7] = 1'bX;
	out_expected[7] = #999000 1'b0;
end 
// expected out[ 6 ]
initial
begin
	out_expected[6] = 1'bX;
	out_expected[6] = #999000 1'b0;
end 
// expected out[ 5 ]
initial
begin
	out_expected[5] = 1'bX;
	out_expected[5] = #999000 1'b0;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
	out_expected[4] = #999000 1'b0;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
	out_expected[3] = #999000 1'b0;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
	out_expected[2] = #999000 1'b0;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
	out_expected[1] = #999000 1'b0;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
	out_expected[0] = #999000 1'b0;
end 

// expected Valid
initial
begin
	Valid_expected = 1'bX;
	Valid_expected = #999000 1'b0;
end 
// generate trigger
always @(Valid_expected or Valid or out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Valid = %b | expected out = %b | ",Valid_expected_prev,out_expected_prev);
	$display("| real Valid = %b | real out = %b | ",Valid_prev,out_prev);
`endif
	if (
		( Valid_expected_prev !== 1'bx ) && ( Valid_prev !== Valid_expected_prev )
		&& ((Valid_expected_prev !== last_Valid_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Valid :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Valid_expected_prev);
		$display ("     Real value = %b", Valid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Valid_exp = Valid_expected_prev;
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( out_expected_prev[5] !== 1'bx ) && ( out_prev[5] !== out_expected_prev[5] )
		&& ((out_expected_prev[5] !== last_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[5] = out_expected_prev[5];
	end
	if (
		( out_expected_prev[6] !== 1'bx ) && ( out_prev[6] !== out_expected_prev[6] )
		&& ((out_expected_prev[6] !== last_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[6] = out_expected_prev[6];
	end
	if (
		( out_expected_prev[7] !== 1'bx ) && ( out_prev[7] !== out_expected_prev[7] )
		&& ((out_expected_prev[7] !== last_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[7] = out_expected_prev[7];
	end
	if (
		( out_expected_prev[8] !== 1'bx ) && ( out_prev[8] !== out_expected_prev[8] )
		&& ((out_expected_prev[8] !== last_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[8] = out_expected_prev[8];
	end
	if (
		( out_expected_prev[9] !== 1'bx ) && ( out_prev[9] !== out_expected_prev[9] )
		&& ((out_expected_prev[9] !== last_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[9] = out_expected_prev[9];
	end
	if (
		( out_expected_prev[10] !== 1'bx ) && ( out_prev[10] !== out_expected_prev[10] )
		&& ((out_expected_prev[10] !== last_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[10] = out_expected_prev[10];
	end
	if (
		( out_expected_prev[11] !== 1'bx ) && ( out_prev[11] !== out_expected_prev[11] )
		&& ((out_expected_prev[11] !== last_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[11] = out_expected_prev[11];
	end
	if (
		( out_expected_prev[12] !== 1'bx ) && ( out_prev[12] !== out_expected_prev[12] )
		&& ((out_expected_prev[12] !== last_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[12] = out_expected_prev[12];
	end
	if (
		( out_expected_prev[13] !== 1'bx ) && ( out_prev[13] !== out_expected_prev[13] )
		&& ((out_expected_prev[13] !== last_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[13] = out_expected_prev[13];
	end
	if (
		( out_expected_prev[14] !== 1'bx ) && ( out_prev[14] !== out_expected_prev[14] )
		&& ((out_expected_prev[14] !== last_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[14] = out_expected_prev[14];
	end
	if (
		( out_expected_prev[15] !== 1'bx ) && ( out_prev[15] !== out_expected_prev[15] )
		&& ((out_expected_prev[15] !== last_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[15] = out_expected_prev[15];
	end
	if (
		( out_expected_prev[16] !== 1'bx ) && ( out_prev[16] !== out_expected_prev[16] )
		&& ((out_expected_prev[16] !== last_out_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[16] = out_expected_prev[16];
	end
	if (
		( out_expected_prev[17] !== 1'bx ) && ( out_prev[17] !== out_expected_prev[17] )
		&& ((out_expected_prev[17] !== last_out_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[17] = out_expected_prev[17];
	end
	if (
		( out_expected_prev[18] !== 1'bx ) && ( out_prev[18] !== out_expected_prev[18] )
		&& ((out_expected_prev[18] !== last_out_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[18] = out_expected_prev[18];
	end
	if (
		( out_expected_prev[19] !== 1'bx ) && ( out_prev[19] !== out_expected_prev[19] )
		&& ((out_expected_prev[19] !== last_out_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[19] = out_expected_prev[19];
	end
	if (
		( out_expected_prev[20] !== 1'bx ) && ( out_prev[20] !== out_expected_prev[20] )
		&& ((out_expected_prev[20] !== last_out_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[20] = out_expected_prev[20];
	end
	if (
		( out_expected_prev[21] !== 1'bx ) && ( out_prev[21] !== out_expected_prev[21] )
		&& ((out_expected_prev[21] !== last_out_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[21] = out_expected_prev[21];
	end
	if (
		( out_expected_prev[22] !== 1'bx ) && ( out_prev[22] !== out_expected_prev[22] )
		&& ((out_expected_prev[22] !== last_out_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[22] = out_expected_prev[22];
	end
	if (
		( out_expected_prev[23] !== 1'bx ) && ( out_prev[23] !== out_expected_prev[23] )
		&& ((out_expected_prev[23] !== last_out_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[23] = out_expected_prev[23];
	end
	if (
		( out_expected_prev[24] !== 1'bx ) && ( out_prev[24] !== out_expected_prev[24] )
		&& ((out_expected_prev[24] !== last_out_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[24] = out_expected_prev[24];
	end
	if (
		( out_expected_prev[25] !== 1'bx ) && ( out_prev[25] !== out_expected_prev[25] )
		&& ((out_expected_prev[25] !== last_out_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[25] = out_expected_prev[25];
	end
	if (
		( out_expected_prev[26] !== 1'bx ) && ( out_prev[26] !== out_expected_prev[26] )
		&& ((out_expected_prev[26] !== last_out_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[26] = out_expected_prev[26];
	end
	if (
		( out_expected_prev[27] !== 1'bx ) && ( out_prev[27] !== out_expected_prev[27] )
		&& ((out_expected_prev[27] !== last_out_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[27] = out_expected_prev[27];
	end
	if (
		( out_expected_prev[28] !== 1'bx ) && ( out_prev[28] !== out_expected_prev[28] )
		&& ((out_expected_prev[28] !== last_out_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[28] = out_expected_prev[28];
	end
	if (
		( out_expected_prev[29] !== 1'bx ) && ( out_prev[29] !== out_expected_prev[29] )
		&& ((out_expected_prev[29] !== last_out_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[29] = out_expected_prev[29];
	end
	if (
		( out_expected_prev[30] !== 1'bx ) && ( out_prev[30] !== out_expected_prev[30] )
		&& ((out_expected_prev[30] !== last_out_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[30] = out_expected_prev[30];
	end
	if (
		( out_expected_prev[31] !== 1'bx ) && ( out_prev[31] !== out_expected_prev[31] )
		&& ((out_expected_prev[31] !== last_out_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[31] = out_expected_prev[31];
	end
	if (
		( out_expected_prev[32] !== 1'bx ) && ( out_prev[32] !== out_expected_prev[32] )
		&& ((out_expected_prev[32] !== last_out_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[32] = out_expected_prev[32];
	end
	if (
		( out_expected_prev[33] !== 1'bx ) && ( out_prev[33] !== out_expected_prev[33] )
		&& ((out_expected_prev[33] !== last_out_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[33] = out_expected_prev[33];
	end
	if (
		( out_expected_prev[34] !== 1'bx ) && ( out_prev[34] !== out_expected_prev[34] )
		&& ((out_expected_prev[34] !== last_out_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[34] = out_expected_prev[34];
	end
	if (
		( out_expected_prev[35] !== 1'bx ) && ( out_prev[35] !== out_expected_prev[35] )
		&& ((out_expected_prev[35] !== last_out_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[35] = out_expected_prev[35];
	end
	if (
		( out_expected_prev[36] !== 1'bx ) && ( out_prev[36] !== out_expected_prev[36] )
		&& ((out_expected_prev[36] !== last_out_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[36] = out_expected_prev[36];
	end
	if (
		( out_expected_prev[37] !== 1'bx ) && ( out_prev[37] !== out_expected_prev[37] )
		&& ((out_expected_prev[37] !== last_out_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[37] = out_expected_prev[37];
	end
	if (
		( out_expected_prev[38] !== 1'bx ) && ( out_prev[38] !== out_expected_prev[38] )
		&& ((out_expected_prev[38] !== last_out_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[38] = out_expected_prev[38];
	end
	if (
		( out_expected_prev[39] !== 1'bx ) && ( out_prev[39] !== out_expected_prev[39] )
		&& ((out_expected_prev[39] !== last_out_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[39] = out_expected_prev[39];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module HW3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg En;
reg RST;
reg [3:0] num;
// wires                                               
wire Valid;
wire [39:0] out;

wire sampler;                             

// assign statements (if any)                          
HW3 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.En(En),
	.RST(RST),
	.Valid(Valid),
	.num(num),
	.out(out)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// En
initial
begin
	En = 1'b1;
	En = #180000 1'b0;
end 

// RST
initial
begin
	RST = 1'b1;
	RST = #20000 1'b0;
end 
// num[ 3 ]
initial
begin
	num[3] = 1'b0;
	num[3] = #20000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #40000 1'b1;
	num[3] = #60000 1'b0;
	num[3] = #40000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #40000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #80000 1'b1;
	num[3] = #60000 1'b0;
	num[3] = #160000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #20000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #80000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #80000 1'b1;
	num[3] = #20000 1'b0;
	num[3] = #140000 1'b1;
	num[3] = #39000 1'b0;
end 
// num[ 2 ]
initial
begin
	num[2] = 1'b0;
	num[2] = #20000 1'b1;
	num[2] = #60000 1'b0;
	num[2] = #40000 1'b1;
	num[2] = #40000 1'b0;
	num[2] = #20000 1'b1;
	num[2] = #20000 1'b0;
	num[2] = #20000 1'b1;
	num[2] = #60000 1'b0;
	num[2] = #20000 1'b1;
	num[2] = #60000 1'b0;
	num[2] = #40000 1'b1;
	num[2] = #180000 1'b0;
	num[2] = #40000 1'b1;
	num[2] = #20000 1'b0;
	num[2] = #20000 1'b1;
	num[2] = #20000 1'b0;
	num[2] = #20000 1'b1;
	num[2] = #20000 1'b0;
	num[2] = #40000 1'b1;
	num[2] = #20000 1'b0;
	num[2] = #80000 1'b1;
	num[2] = #40000 1'b0;
end 
// num[ 1 ]
initial
begin
	num[1] = 1'b0;
	num[1] = #40000 1'b1;
	num[1] = #20000 1'b0;
	num[1] = #100000 1'b1;
	num[1] = #40000 1'b0;
	num[1] = #40000 1'b1;
	num[1] = #100000 1'b0;
	num[1] = #80000 1'b1;
	num[1] = #20000 1'b0;
	num[1] = #80000 1'b1;
	num[1] = #40000 1'b0;
	num[1] = #20000 1'b1;
	num[1] = #20000 1'b0;
	num[1] = #40000 1'b1;
	num[1] = #20000 1'b0;
	num[1] = #20000 1'b1;
	num[1] = #120000 1'b0;
	num[1] = #20000 1'b1;
	num[1] = #20000 1'b0;
	num[1] = #60000 1'b1;
	num[1] = #40000 1'b0;
	num[1] = #40000 1'b1;
	num[1] = #19000 1'b0;
end 
// num[ 0 ]
initial
begin
	num[0] = 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #60000 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #20000 1'b1;
	num[0] = #40000 1'b0;
	num[0] = #80000 1'b1;
	num[0] = #40000 1'b0;
	num[0] = #80000 1'b1;
	num[0] = #80000 1'b0;
	num[0] = #80000 1'b1;
	num[0] = #40000 1'b0;
	num[0] = #40000 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #20000 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #20000 1'b1;
	num[0] = #40000 1'b0;
	num[0] = #20000 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #40000 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #20000 1'b1;
	num[0] = #20000 1'b0;
	num[0] = #80000 1'b1;
	num[0] = #59000 1'b0;
end 

HW3_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.En(En),
	.RST(RST),
	.num(num),
	.sampler_tx(sampler)
);

HW3_vlg_check_tst tb_out(
	.Valid(Valid),
	.out(out),
	.sampler_rx(sampler)
);
endmodule

