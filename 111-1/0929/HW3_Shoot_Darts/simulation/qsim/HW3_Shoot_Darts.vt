// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/29/2022 17:12:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    HW3_Shoot_Darts
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HW3_Shoot_Darts_vlg_sample_tst(
	x1,
	x2,
	x3,
	x4,
	y1,
	y2,
	y3,
	y4,
	sampler_tx
);
input [3:0] x1;
input [3:0] x2;
input [3:0] x3;
input [3:0] x4;
input [3:0] y1;
input [3:0] y2;
input [3:0] y3;
input [3:0] y4;
output sampler_tx;

reg sample;
time current_time;
always @(x1 or x2 or x3 or x4 or y1 or y2 or y3 or y4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module HW3_Shoot_Darts_vlg_check_tst (
	A,
	B,
	C,
	D,
	Max,
	sampler_rx
);
input [2:0] A;
input [2:0] B;
input [2:0] C;
input [2:0] D;
input [2:0] Max;
input sampler_rx;

reg [2:0] A_expected;
reg [2:0] B_expected;
reg [2:0] C_expected;
reg [2:0] D_expected;
reg [2:0] Max_expected;

reg [2:0] A_prev;
reg [2:0] B_prev;
reg [2:0] C_prev;
reg [2:0] D_prev;
reg [2:0] Max_prev;

reg [2:0] A_expected_prev;
reg [2:0] B_expected_prev;
reg [2:0] C_expected_prev;
reg [2:0] D_expected_prev;
reg [2:0] Max_expected_prev;

reg [2:0] last_A_exp;
reg [2:0] last_B_exp;
reg [2:0] last_C_exp;
reg [2:0] last_D_exp;
reg [2:0] last_Max_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	D_prev = D;
	Max_prev = Max;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	D_expected_prev = D_expected;
	Max_expected_prev = Max_expected;
end


// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected C[ 2 ]
initial
begin
	C_expected[2] = 1'bX;
end 
// expected C[ 1 ]
initial
begin
	C_expected[1] = 1'bX;
end 
// expected C[ 0 ]
initial
begin
	C_expected[0] = 1'bX;
end 
// expected D[ 2 ]
initial
begin
	D_expected[2] = 1'bX;
end 
// expected D[ 1 ]
initial
begin
	D_expected[1] = 1'bX;
end 
// expected D[ 0 ]
initial
begin
	D_expected[0] = 1'bX;
end 
// expected Max[ 2 ]
initial
begin
	Max_expected[2] = 1'bX;
end 
// expected Max[ 1 ]
initial
begin
	Max_expected[1] = 1'bX;
end 
// expected Max[ 0 ]
initial
begin
	Max_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or D_expected or D or Max_expected or Max)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected D = %b | expected Max = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,D_expected_prev,Max_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real D = %b | real Max = %b | ",A_prev,B_prev,C_prev,D_prev,Max_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( C_expected_prev[0] !== 1'bx ) && ( C_prev[0] !== C_expected_prev[0] )
		&& ((C_expected_prev[0] !== last_C_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[0] = C_expected_prev[0];
	end
	if (
		( C_expected_prev[1] !== 1'bx ) && ( C_prev[1] !== C_expected_prev[1] )
		&& ((C_expected_prev[1] !== last_C_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[1] = C_expected_prev[1];
	end
	if (
		( C_expected_prev[2] !== 1'bx ) && ( C_prev[2] !== C_expected_prev[2] )
		&& ((C_expected_prev[2] !== last_C_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[2] = C_expected_prev[2];
	end
	if (
		( D_expected_prev[0] !== 1'bx ) && ( D_prev[0] !== D_expected_prev[0] )
		&& ((D_expected_prev[0] !== last_D_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[0] = D_expected_prev[0];
	end
	if (
		( D_expected_prev[1] !== 1'bx ) && ( D_prev[1] !== D_expected_prev[1] )
		&& ((D_expected_prev[1] !== last_D_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[1] = D_expected_prev[1];
	end
	if (
		( D_expected_prev[2] !== 1'bx ) && ( D_prev[2] !== D_expected_prev[2] )
		&& ((D_expected_prev[2] !== last_D_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[2] = D_expected_prev[2];
	end
	if (
		( Max_expected_prev[0] !== 1'bx ) && ( Max_prev[0] !== Max_expected_prev[0] )
		&& ((Max_expected_prev[0] !== last_Max_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Max[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Max_expected_prev);
		$display ("     Real value = %b", Max_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Max_exp[0] = Max_expected_prev[0];
	end
	if (
		( Max_expected_prev[1] !== 1'bx ) && ( Max_prev[1] !== Max_expected_prev[1] )
		&& ((Max_expected_prev[1] !== last_Max_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Max[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Max_expected_prev);
		$display ("     Real value = %b", Max_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Max_exp[1] = Max_expected_prev[1];
	end
	if (
		( Max_expected_prev[2] !== 1'bx ) && ( Max_prev[2] !== Max_expected_prev[2] )
		&& ((Max_expected_prev[2] !== last_Max_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Max[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Max_expected_prev);
		$display ("     Real value = %b", Max_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Max_exp[2] = Max_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module HW3_Shoot_Darts_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] x1;
reg [3:0] x2;
reg [3:0] x3;
reg [3:0] x4;
reg [3:0] y1;
reg [3:0] y2;
reg [3:0] y3;
reg [3:0] y4;
// wires                                               
wire [2:0] A;
wire [2:0] B;
wire [2:0] C;
wire [2:0] D;
wire [2:0] Max;

wire sampler;                             

// assign statements (if any)                          
HW3_Shoot_Darts i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.Max(Max),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4)
);
// x1[ 3 ]
initial
begin
	x1[3] = 1'b0;
	x1[3] = #30000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #40000 1'b0;
	x1[3] = #40000 1'b1;
	x1[3] = #40000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #30000 1'b1;
	x1[3] = #30000 1'b0;
	x1[3] = #40000 1'b1;
	x1[3] = #70000 1'b0;
	x1[3] = #30000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #20000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #20000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #30000 1'b1;
	x1[3] = #20000 1'b0;
	x1[3] = #20000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #30000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #30000 1'b0;
	x1[3] = #10000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #20000 1'b1;
	x1[3] = #10000 1'b0;
	x1[3] = #30000 1'b1;
	x1[3] = #40000 1'b0;
	x1[3] = #30000 1'b1;
end 
// x1[ 2 ]
initial
begin
	x1[2] = 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #20000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #20000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #20000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #20000 1'b1;
	x1[2] = #40000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #30000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #20000 1'b0;
	x1[2] = #40000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #20000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #20000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #30000 1'b1;
	x1[2] = #80000 1'b0;
	x1[2] = #20000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #30000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #70000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #20000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #40000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #20000 1'b1;
	x1[2] = #10000 1'b0;
	x1[2] = #30000 1'b1;
	x1[2] = #50000 1'b0;
	x1[2] = #10000 1'b1;
	x1[2] = #20000 1'b0;
	x1[2] = #30000 1'b1;
	x1[2] = #20000 1'b0;
end 
// x1[ 1 ]
initial
begin
	x1[1] = 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #30000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #30000 1'b1;
	x1[1] = #20000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #20000 1'b0;
	x1[1] = #30000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #20000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #40000 1'b1;
	x1[1] = #20000 1'b0;
	x1[1] = #40000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #20000 1'b0;
	x1[1] = #20000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #20000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #20000 1'b1;
	x1[1] = #50000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #30000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #20000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #10000 1'b0;
	x1[1] = #20000 1'b1;
	x1[1] = #30000 1'b0;
	x1[1] = #10000 1'b1;
	x1[1] = #30000 1'b0;
end 
// x1[ 0 ]
initial
begin
	x1[0] = 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #110000 1'b0;
	x1[0] = #10000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #20000 1'b0;
	x1[0] = #40000 1'b1;
	x1[0] = #40000 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #10000 1'b1;
	x1[0] = #40000 1'b0;
	x1[0] = #10000 1'b1;
	x1[0] = #20000 1'b0;
	x1[0] = #50000 1'b1;
	x1[0] = #60000 1'b0;
	x1[0] = #10000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #30000 1'b1;
	x1[0] = #70000 1'b0;
	x1[0] = #10000 1'b1;
	x1[0] = #50000 1'b0;
	x1[0] = #30000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #20000 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #20000 1'b0;
	x1[0] = #20000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #10000 1'b1;
	x1[0] = #20000 1'b0;
	x1[0] = #40000 1'b1;
	x1[0] = #10000 1'b0;
	x1[0] = #10000 1'b1;
end 
// y1[ 3 ]
initial
begin
	y1[3] = 1'b0;
	y1[3] = #30000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #40000 1'b0;
	y1[3] = #40000 1'b1;
	y1[3] = #40000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #30000 1'b1;
	y1[3] = #30000 1'b0;
	y1[3] = #40000 1'b1;
	y1[3] = #70000 1'b0;
	y1[3] = #30000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #20000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #20000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #30000 1'b1;
	y1[3] = #20000 1'b0;
	y1[3] = #20000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #30000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #30000 1'b0;
	y1[3] = #10000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #20000 1'b1;
	y1[3] = #10000 1'b0;
	y1[3] = #30000 1'b1;
	y1[3] = #40000 1'b0;
	y1[3] = #30000 1'b1;
end 
// y1[ 2 ]
initial
begin
	y1[2] = 1'b1;
	y1[2] = #20000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #20000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #20000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #20000 1'b1;
	y1[2] = #40000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #30000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #20000 1'b0;
	y1[2] = #40000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #20000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #20000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #30000 1'b1;
	y1[2] = #80000 1'b0;
	y1[2] = #20000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #30000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #70000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #20000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #40000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #20000 1'b1;
	y1[2] = #10000 1'b0;
	y1[2] = #30000 1'b1;
	y1[2] = #50000 1'b0;
	y1[2] = #10000 1'b1;
	y1[2] = #20000 1'b0;
	y1[2] = #30000 1'b1;
	y1[2] = #20000 1'b0;
end 
// y1[ 1 ]
initial
begin
	y1[1] = 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #30000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #30000 1'b1;
	y1[1] = #20000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #20000 1'b0;
	y1[1] = #30000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #20000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #40000 1'b1;
	y1[1] = #20000 1'b0;
	y1[1] = #40000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #20000 1'b0;
	y1[1] = #20000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #20000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #20000 1'b1;
	y1[1] = #50000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #30000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #20000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #10000 1'b0;
	y1[1] = #20000 1'b1;
	y1[1] = #30000 1'b0;
	y1[1] = #10000 1'b1;
	y1[1] = #30000 1'b0;
end 
// y1[ 0 ]
initial
begin
	y1[0] = 1'b1;
	y1[0] = #130000 1'b0;
	y1[0] = #10000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #20000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #20000 1'b1;
	y1[0] = #20000 1'b0;
	y1[0] = #40000 1'b1;
	y1[0] = #40000 1'b0;
	y1[0] = #20000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #10000 1'b1;
	y1[0] = #40000 1'b0;
	y1[0] = #10000 1'b1;
	y1[0] = #20000 1'b0;
	y1[0] = #50000 1'b1;
	y1[0] = #60000 1'b0;
	y1[0] = #10000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #30000 1'b1;
	y1[0] = #70000 1'b0;
	y1[0] = #10000 1'b1;
	y1[0] = #50000 1'b0;
	y1[0] = #30000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #20000 1'b1;
	y1[0] = #20000 1'b0;
	y1[0] = #20000 1'b1;
	y1[0] = #20000 1'b0;
	y1[0] = #20000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #10000 1'b1;
	y1[0] = #20000 1'b0;
	y1[0] = #40000 1'b1;
	y1[0] = #10000 1'b0;
	y1[0] = #10000 1'b1;
end 
// x2[ 3 ]
initial
begin
	x2[3] = 1'b0;
	x2[3] = #40000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #20000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #40000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #20000 1'b1;
	x2[3] = #60000 1'b0;
	x2[3] = #80000 1'b1;
	x2[3] = #30000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #30000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #40000 1'b0;
	x2[3] = #20000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #40000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #20000 1'b0;
	x2[3] = #20000 1'b1;
	x2[3] = #30000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #20000 1'b0;
	x2[3] = #20000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #30000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #20000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #30000 1'b0;
	x2[3] = #20000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #20000 1'b0;
	x2[3] = #30000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #30000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #30000 1'b1;
	x2[3] = #10000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #20000 1'b0;
	x2[3] = #10000 1'b1;
	x2[3] = #10000 1'b0;
end 
// x2[ 2 ]
initial
begin
	x2[2] = 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #60000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #20000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #20000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #40000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #30000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #20000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #30000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #30000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #50000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #10000 1'b1;
	x2[2] = #30000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #20000 1'b1;
	x2[2] = #10000 1'b0;
	x2[2] = #30000 1'b1;
end 
// x2[ 1 ]
initial
begin
	x2[1] = 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #50000 1'b0;
	x2[1] = #20000 1'b1;
	x2[1] = #30000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #60000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #30000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #40000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #30000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #30000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #30000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #20000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #20000 1'b1;
	x2[1] = #30000 1'b0;
	x2[1] = #20000 1'b1;
	x2[1] = #40000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #20000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #20000 1'b1;
	x2[1] = #10000 1'b0;
	x2[1] = #10000 1'b1;
	x2[1] = #40000 1'b0;
	x2[1] = #30000 1'b1;
end 
// x2[ 0 ]
initial
begin
	x2[0] = 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #20000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #60000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #30000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #20000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #20000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #20000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #20000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #30000 1'b1;
	x2[0] = #40000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #60000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #30000 1'b0;
	x2[0] = #40000 1'b1;
	x2[0] = #20000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #20000 1'b0;
end 
// y2[ 3 ]
initial
begin
	y2[3] = 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #30000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #20000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #40000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #20000 1'b1;
	y2[3] = #60000 1'b0;
	y2[3] = #80000 1'b1;
	y2[3] = #30000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #30000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #40000 1'b0;
	y2[3] = #20000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #40000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #20000 1'b0;
	y2[3] = #20000 1'b1;
	y2[3] = #30000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #20000 1'b0;
	y2[3] = #20000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #30000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #20000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #30000 1'b0;
	y2[3] = #20000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #20000 1'b0;
	y2[3] = #30000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #30000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #30000 1'b1;
	y2[3] = #10000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #20000 1'b0;
	y2[3] = #10000 1'b1;
	y2[3] = #10000 1'b0;
end 
// y2[ 2 ]
initial
begin
	y2[2] = 1'b1;
	y2[2] = #80000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #20000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #20000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #40000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #30000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #20000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #30000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #30000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #50000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #10000 1'b1;
	y2[2] = #30000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #20000 1'b1;
	y2[2] = #10000 1'b0;
	y2[2] = #30000 1'b1;
end 
// y2[ 1 ]
initial
begin
	y2[1] = 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #50000 1'b0;
	y2[1] = #20000 1'b1;
	y2[1] = #30000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #60000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #30000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #40000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #30000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #30000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #30000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #20000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #20000 1'b1;
	y2[1] = #30000 1'b0;
	y2[1] = #20000 1'b1;
	y2[1] = #40000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #20000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #20000 1'b1;
	y2[1] = #10000 1'b0;
	y2[1] = #10000 1'b1;
	y2[1] = #40000 1'b0;
	y2[1] = #30000 1'b1;
end 
// y2[ 0 ]
initial
begin
	y2[0] = 1'b0;
	y2[0] = #30000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #20000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #60000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #20000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #30000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #20000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #20000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #20000 1'b0;
	y2[0] = #20000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #20000 1'b1;
	y2[0] = #20000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #20000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #20000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #20000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #30000 1'b1;
	y2[0] = #40000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #60000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #30000 1'b0;
	y2[0] = #40000 1'b1;
	y2[0] = #20000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #10000 1'b0;
	y2[0] = #10000 1'b1;
	y2[0] = #20000 1'b0;
end 
// x3[ 3 ]
initial
begin
	x3[3] = 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #20000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #30000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #30000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #30000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #20000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #30000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #50000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #40000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #30000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #30000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #40000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #40000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #10000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #40000 1'b0;
	x3[3] = #10000 1'b1;
	x3[3] = #20000 1'b0;
	x3[3] = #20000 1'b1;
	x3[3] = #30000 1'b0;
	x3[3] = #10000 1'b1;
end 
// x3[ 2 ]
initial
begin
	x3[2] = 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #20000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #30000 1'b1;
	x3[2] = #30000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #60000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #20000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #30000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #20000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #60000 1'b1;
	x3[2] = #40000 1'b0;
	x3[2] = #70000 1'b1;
	x3[2] = #40000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #10000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #20000 1'b0;
	x3[2] = #30000 1'b1;
	x3[2] = #20000 1'b0;
	x3[2] = #20000 1'b1;
	x3[2] = #40000 1'b0;
	x3[2] = #10000 1'b1;
	x3[2] = #40000 1'b0;
end 
// x3[ 1 ]
initial
begin
	x3[1] = 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #60000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #50000 1'b0;
	x3[1] = #20000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #60000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #20000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #20000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #30000 1'b1;
	x3[1] = #80000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #70000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #40000 1'b0;
	x3[1] = #20000 1'b1;
	x3[1] = #30000 1'b0;
	x3[1] = #20000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #20000 1'b1;
	x3[1] = #20000 1'b0;
	x3[1] = #10000 1'b1;
	x3[1] = #10000 1'b0;
end 
// x3[ 0 ]
initial
begin
	x3[0] = 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #80000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #30000 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #30000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #30000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #30000 1'b0;
	x3[0] = #30000 1'b1;
	x3[0] = #50000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #50000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #50000 1'b0;
	x3[0] = #60000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #20000 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #30000 1'b1;
	x3[0] = #10000 1'b0;
	x3[0] = #10000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #40000 1'b1;
	x3[0] = #50000 1'b0;
	x3[0] = #60000 1'b1;
	x3[0] = #20000 1'b0;
	x3[0] = #30000 1'b1;
end 
// y3[ 3 ]
initial
begin
	y3[3] = 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #20000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #20000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #30000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #30000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #30000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #20000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #30000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #50000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #40000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #30000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #30000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #40000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #40000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #10000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #40000 1'b0;
	y3[3] = #10000 1'b1;
	y3[3] = #20000 1'b0;
	y3[3] = #20000 1'b1;
	y3[3] = #30000 1'b0;
	y3[3] = #10000 1'b1;
end 
// y3[ 2 ]
initial
begin
	y3[2] = 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #20000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #30000 1'b1;
	y3[2] = #30000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #60000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #20000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #30000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #20000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #60000 1'b1;
	y3[2] = #40000 1'b0;
	y3[2] = #70000 1'b1;
	y3[2] = #40000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #10000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #20000 1'b0;
	y3[2] = #30000 1'b1;
	y3[2] = #20000 1'b0;
	y3[2] = #20000 1'b1;
	y3[2] = #40000 1'b0;
	y3[2] = #10000 1'b1;
	y3[2] = #40000 1'b0;
end 
// y3[ 1 ]
initial
begin
	y3[1] = 1'b1;
	y3[1] = #80000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #50000 1'b0;
	y3[1] = #20000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #60000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #20000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #20000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #30000 1'b1;
	y3[1] = #80000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #70000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #40000 1'b0;
	y3[1] = #20000 1'b1;
	y3[1] = #30000 1'b0;
	y3[1] = #20000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #20000 1'b1;
	y3[1] = #20000 1'b0;
	y3[1] = #10000 1'b1;
	y3[1] = #10000 1'b0;
end 
// y3[ 0 ]
initial
begin
	y3[0] = 1'b0;
	y3[0] = #20000 1'b1;
	y3[0] = #10000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #80000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #30000 1'b1;
	y3[0] = #10000 1'b0;
	y3[0] = #30000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #30000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #30000 1'b0;
	y3[0] = #30000 1'b1;
	y3[0] = #50000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #10000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #50000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #50000 1'b0;
	y3[0] = #60000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #20000 1'b1;
	y3[0] = #10000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #10000 1'b0;
	y3[0] = #30000 1'b1;
	y3[0] = #10000 1'b0;
	y3[0] = #10000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #40000 1'b1;
	y3[0] = #50000 1'b0;
	y3[0] = #60000 1'b1;
	y3[0] = #20000 1'b0;
	y3[0] = #30000 1'b1;
end 
// x4[ 3 ]
initial
begin
	x4[3] = 1'b1;
	x4[3] = #20000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #30000 1'b0;
	x4[3] = #80000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #40000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #40000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #70000 1'b1;
	x4[3] = #20000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #30000 1'b0;
	x4[3] = #20000 1'b1;
	x4[3] = #90000 1'b0;
	x4[3] = #20000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #20000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #40000 1'b1;
	x4[3] = #20000 1'b0;
	x4[3] = #50000 1'b1;
	x4[3] = #30000 1'b0;
	x4[3] = #40000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #40000 1'b1;
	x4[3] = #20000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #20000 1'b1;
	x4[3] = #10000 1'b0;
	x4[3] = #10000 1'b1;
	x4[3] = #60000 1'b0;
	x4[3] = #10000 1'b1;
end 
// x4[ 2 ]
initial
begin
	x4[2] = 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #20000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #40000 1'b1;
	x4[2] = #40000 1'b0;
	x4[2] = #40000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #20000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #20000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #40000 1'b1;
	x4[2] = #40000 1'b0;
	x4[2] = #40000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #20000 1'b1;
	x4[2] = #30000 1'b0;
	x4[2] = #40000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #40000 1'b0;
	x4[2] = #50000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #30000 1'b0;
	x4[2] = #30000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #20000 1'b1;
	x4[2] = #10000 1'b0;
	x4[2] = #10000 1'b1;
	x4[2] = #20000 1'b0;
	x4[2] = #20000 1'b1;
end 
// x4[ 1 ]
initial
begin
	x4[1] = 1'b1;
	x4[1] = #20000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #50000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #40000 1'b1;
	x4[1] = #20000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #30000 1'b1;
	x4[1] = #20000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #20000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #20000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #30000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #30000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #20000 1'b0;
	x4[1] = #20000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #30000 1'b0;
	x4[1] = #10000 1'b1;
	x4[1] = #10000 1'b0;
	x4[1] = #20000 1'b1;
end 
// x4[ 0 ]
initial
begin
	x4[0] = 1'b0;
	x4[0] = #30000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #20000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #50000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #20000 1'b0;
	x4[0] = #60000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #30000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #20000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #30000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #20000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #20000 1'b1;
	x4[0] = #20000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #20000 1'b0;
	x4[0] = #20000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #80000 1'b1;
	x4[0] = #10000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #20000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #20000 1'b0;
	x4[0] = #30000 1'b1;
	x4[0] = #50000 1'b0;
	x4[0] = #10000 1'b1;
	x4[0] = #30000 1'b0;
	x4[0] = #10000 1'b1;
end 
// y4[ 3 ]
initial
begin
	y4[3] = 1'b0;
	y4[3] = #30000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #20000 1'b1;
	y4[3] = #40000 1'b0;
	y4[3] = #20000 1'b1;
	y4[3] = #70000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #20000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #50000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #20000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #30000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #40000 1'b1;
	y4[3] = #30000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #50000 1'b0;
	y4[3] = #20000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #20000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #40000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #20000 1'b0;
	y4[3] = #10000 1'b1;
	y4[3] = #10000 1'b0;
	y4[3] = #50000 1'b1;
end 
// y4[ 2 ]
initial
begin
	y4[2] = 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #30000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #60000 1'b0;
	y4[2] = #30000 1'b1;
	y4[2] = #30000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #30000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #20000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #50000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #30000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #20000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #60000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #20000 1'b1;
	y4[2] = #30000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #20000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #20000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #80000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #30000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #10000 1'b0;
	y4[2] = #10000 1'b1;
	y4[2] = #20000 1'b0;
	y4[2] = #20000 1'b1;
end 
// y4[ 1 ]
initial
begin
	y4[1] = 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #30000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #10000 1'b0;
	y4[1] = #50000 1'b1;
	y4[1] = #10000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #30000 1'b0;
	y4[1] = #40000 1'b1;
	y4[1] = #60000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #40000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #30000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #30000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #10000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #30000 1'b1;
	y4[1] = #30000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #30000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #10000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #20000 1'b0;
	y4[1] = #20000 1'b1;
	y4[1] = #10000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #30000 1'b0;
	y4[1] = #30000 1'b1;
	y4[1] = #10000 1'b0;
	y4[1] = #10000 1'b1;
	y4[1] = #40000 1'b0;
	y4[1] = #30000 1'b1;
	y4[1] = #20000 1'b0;
end 
// y4[ 0 ]
initial
begin
	y4[0] = 1'b0;
	y4[0] = #30000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #40000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #40000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #30000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #30000 1'b0;
	y4[0] = #20000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #30000 1'b1;
	y4[0] = #30000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #50000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #50000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #50000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #20000 1'b1;
	y4[0] = #20000 1'b0;
	y4[0] = #10000 1'b1;
	y4[0] = #30000 1'b0;
	y4[0] = #40000 1'b1;
	y4[0] = #10000 1'b0;
	y4[0] = #60000 1'b1;
end 

HW3_Shoot_Darts_vlg_sample_tst tb_sample (
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.sampler_tx(sampler)
);

HW3_Shoot_Darts_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.Max(Max),
	.sampler_rx(sampler)
);
endmodule

