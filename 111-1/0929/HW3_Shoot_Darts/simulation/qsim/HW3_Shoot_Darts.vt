// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2022 14:30:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    HW3_Shoot_Darts
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HW3_Shoot_Darts_vlg_sample_tst(
	a_x,
	a_y,
	b_x,
	b_y,
	c_x,
	c_y,
	d_x,
	d_y,
	sampler_tx
);
input [3:0] a_x;
input [3:0] a_y;
input [3:0] b_x;
input [3:0] b_y;
input [3:0] c_x;
input [3:0] c_y;
input [3:0] d_x;
input [3:0] d_y;
output sampler_tx;

reg sample;
time current_time;
always @(a_x or a_y or b_x or b_y or c_x or c_y or d_x or d_y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module HW3_Shoot_Darts_vlg_check_tst (
	A_s,
	B_s,
	C_s,
	D_s,
	Maxs,
	sampler_rx
);
input [2:0] A_s;
input [2:0] B_s;
input [2:0] C_s;
input [2:0] D_s;
input [2:0] Maxs;
input sampler_rx;

reg [2:0] A_s_expected;
reg [2:0] B_s_expected;
reg [2:0] C_s_expected;
reg [2:0] D_s_expected;
reg [2:0] Maxs_expected;

reg [2:0] A_s_prev;
reg [2:0] B_s_prev;
reg [2:0] C_s_prev;
reg [2:0] D_s_prev;
reg [2:0] Maxs_prev;

reg [2:0] A_s_expected_prev;
reg [2:0] B_s_expected_prev;
reg [2:0] C_s_expected_prev;
reg [2:0] D_s_expected_prev;
reg [2:0] Maxs_expected_prev;

reg [2:0] last_A_s_exp;
reg [2:0] last_B_s_exp;
reg [2:0] last_C_s_exp;
reg [2:0] last_D_s_exp;
reg [2:0] last_Maxs_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_s_prev = A_s;
	B_s_prev = B_s;
	C_s_prev = C_s;
	D_s_prev = D_s;
	Maxs_prev = Maxs;
end

// update expected /o prevs

always @(trigger)
begin
	A_s_expected_prev = A_s_expected;
	B_s_expected_prev = B_s_expected;
	C_s_expected_prev = C_s_expected;
	D_s_expected_prev = D_s_expected;
	Maxs_expected_prev = Maxs_expected;
end


// expected Maxs[ 2 ]
initial
begin
	Maxs_expected[2] = 1'bX;
end 
// expected Maxs[ 1 ]
initial
begin
	Maxs_expected[1] = 1'bX;
end 
// expected Maxs[ 0 ]
initial
begin
	Maxs_expected[0] = 1'bX;
end 
// expected A_s[ 2 ]
initial
begin
	A_s_expected[2] = 1'bX;
end 
// expected A_s[ 1 ]
initial
begin
	A_s_expected[1] = 1'bX;
end 
// expected A_s[ 0 ]
initial
begin
	A_s_expected[0] = 1'bX;
end 
// expected B_s[ 2 ]
initial
begin
	B_s_expected[2] = 1'bX;
end 
// expected B_s[ 1 ]
initial
begin
	B_s_expected[1] = 1'bX;
end 
// expected B_s[ 0 ]
initial
begin
	B_s_expected[0] = 1'bX;
end 
// expected C_s[ 2 ]
initial
begin
	C_s_expected[2] = 1'bX;
end 
// expected C_s[ 1 ]
initial
begin
	C_s_expected[1] = 1'bX;
end 
// expected C_s[ 0 ]
initial
begin
	C_s_expected[0] = 1'bX;
end 
// expected D_s[ 2 ]
initial
begin
	D_s_expected[2] = 1'bX;
end 
// expected D_s[ 1 ]
initial
begin
	D_s_expected[1] = 1'bX;
end 
// expected D_s[ 0 ]
initial
begin
	D_s_expected[0] = 1'bX;
end 
// generate trigger
always @(A_s_expected or A_s or B_s_expected or B_s or C_s_expected or C_s or D_s_expected or D_s or Maxs_expected or Maxs)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_s = %b | expected B_s = %b | expected C_s = %b | expected D_s = %b | expected Maxs = %b | ",A_s_expected_prev,B_s_expected_prev,C_s_expected_prev,D_s_expected_prev,Maxs_expected_prev);
	$display("| real A_s = %b | real B_s = %b | real C_s = %b | real D_s = %b | real Maxs = %b | ",A_s_prev,B_s_prev,C_s_prev,D_s_prev,Maxs_prev);
`endif
	if (
		( A_s_expected_prev[0] !== 1'bx ) && ( A_s_prev[0] !== A_s_expected_prev[0] )
		&& ((A_s_expected_prev[0] !== last_A_s_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_s_expected_prev);
		$display ("     Real value = %b", A_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_s_exp[0] = A_s_expected_prev[0];
	end
	if (
		( A_s_expected_prev[1] !== 1'bx ) && ( A_s_prev[1] !== A_s_expected_prev[1] )
		&& ((A_s_expected_prev[1] !== last_A_s_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_s_expected_prev);
		$display ("     Real value = %b", A_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_s_exp[1] = A_s_expected_prev[1];
	end
	if (
		( A_s_expected_prev[2] !== 1'bx ) && ( A_s_prev[2] !== A_s_expected_prev[2] )
		&& ((A_s_expected_prev[2] !== last_A_s_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_s_expected_prev);
		$display ("     Real value = %b", A_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_s_exp[2] = A_s_expected_prev[2];
	end
	if (
		( B_s_expected_prev[0] !== 1'bx ) && ( B_s_prev[0] !== B_s_expected_prev[0] )
		&& ((B_s_expected_prev[0] !== last_B_s_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_s_expected_prev);
		$display ("     Real value = %b", B_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_s_exp[0] = B_s_expected_prev[0];
	end
	if (
		( B_s_expected_prev[1] !== 1'bx ) && ( B_s_prev[1] !== B_s_expected_prev[1] )
		&& ((B_s_expected_prev[1] !== last_B_s_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_s_expected_prev);
		$display ("     Real value = %b", B_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_s_exp[1] = B_s_expected_prev[1];
	end
	if (
		( B_s_expected_prev[2] !== 1'bx ) && ( B_s_prev[2] !== B_s_expected_prev[2] )
		&& ((B_s_expected_prev[2] !== last_B_s_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_s_expected_prev);
		$display ("     Real value = %b", B_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_s_exp[2] = B_s_expected_prev[2];
	end
	if (
		( C_s_expected_prev[0] !== 1'bx ) && ( C_s_prev[0] !== C_s_expected_prev[0] )
		&& ((C_s_expected_prev[0] !== last_C_s_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_s_expected_prev);
		$display ("     Real value = %b", C_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_s_exp[0] = C_s_expected_prev[0];
	end
	if (
		( C_s_expected_prev[1] !== 1'bx ) && ( C_s_prev[1] !== C_s_expected_prev[1] )
		&& ((C_s_expected_prev[1] !== last_C_s_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_s_expected_prev);
		$display ("     Real value = %b", C_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_s_exp[1] = C_s_expected_prev[1];
	end
	if (
		( C_s_expected_prev[2] !== 1'bx ) && ( C_s_prev[2] !== C_s_expected_prev[2] )
		&& ((C_s_expected_prev[2] !== last_C_s_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_s_expected_prev);
		$display ("     Real value = %b", C_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_s_exp[2] = C_s_expected_prev[2];
	end
	if (
		( D_s_expected_prev[0] !== 1'bx ) && ( D_s_prev[0] !== D_s_expected_prev[0] )
		&& ((D_s_expected_prev[0] !== last_D_s_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_s_expected_prev);
		$display ("     Real value = %b", D_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_s_exp[0] = D_s_expected_prev[0];
	end
	if (
		( D_s_expected_prev[1] !== 1'bx ) && ( D_s_prev[1] !== D_s_expected_prev[1] )
		&& ((D_s_expected_prev[1] !== last_D_s_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_s_expected_prev);
		$display ("     Real value = %b", D_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_s_exp[1] = D_s_expected_prev[1];
	end
	if (
		( D_s_expected_prev[2] !== 1'bx ) && ( D_s_prev[2] !== D_s_expected_prev[2] )
		&& ((D_s_expected_prev[2] !== last_D_s_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_s_expected_prev);
		$display ("     Real value = %b", D_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_s_exp[2] = D_s_expected_prev[2];
	end
	if (
		( Maxs_expected_prev[0] !== 1'bx ) && ( Maxs_prev[0] !== Maxs_expected_prev[0] )
		&& ((Maxs_expected_prev[0] !== last_Maxs_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Maxs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Maxs_expected_prev);
		$display ("     Real value = %b", Maxs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Maxs_exp[0] = Maxs_expected_prev[0];
	end
	if (
		( Maxs_expected_prev[1] !== 1'bx ) && ( Maxs_prev[1] !== Maxs_expected_prev[1] )
		&& ((Maxs_expected_prev[1] !== last_Maxs_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Maxs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Maxs_expected_prev);
		$display ("     Real value = %b", Maxs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Maxs_exp[1] = Maxs_expected_prev[1];
	end
	if (
		( Maxs_expected_prev[2] !== 1'bx ) && ( Maxs_prev[2] !== Maxs_expected_prev[2] )
		&& ((Maxs_expected_prev[2] !== last_Maxs_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Maxs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Maxs_expected_prev);
		$display ("     Real value = %b", Maxs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Maxs_exp[2] = Maxs_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module HW3_Shoot_Darts_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a_x;
reg [3:0] a_y;
reg [3:0] b_x;
reg [3:0] b_y;
reg [3:0] c_x;
reg [3:0] c_y;
reg [3:0] d_x;
reg [3:0] d_y;
// wires                                               
wire [2:0] A_s;
wire [2:0] B_s;
wire [2:0] C_s;
wire [2:0] D_s;
wire [2:0] Maxs;

wire sampler;                             

// assign statements (if any)                          
HW3_Shoot_Darts i1 (
// port map - connection between master ports and signals/registers   
	.A_s(A_s),
	.B_s(B_s),
	.C_s(C_s),
	.D_s(D_s),
	.Maxs(Maxs),
	.a_x(a_x),
	.a_y(a_y),
	.b_x(b_x),
	.b_y(b_y),
	.c_x(c_x),
	.c_y(c_y),
	.d_x(d_x),
	.d_y(d_y)
);
// a_x[ 3 ]
initial
begin
	a_x[3] = 1'b0;
end 
// a_x[ 2 ]
initial
begin
	a_x[2] = 1'b1;
	a_x[2] = #10000 1'b0;
end 
// a_x[ 1 ]
initial
begin
	a_x[1] = 1'b1;
	a_x[1] = #10000 1'b0;
end 
// a_x[ 0 ]
initial
begin
	a_x[0] = 1'b0;
end 
// a_y[ 3 ]
initial
begin
	a_y[3] = 1'b0;
end 
// a_y[ 2 ]
initial
begin
	a_y[2] = 1'b1;
	a_y[2] = #20000 1'b0;
end 
// a_y[ 1 ]
initial
begin
	a_y[1] = 1'b1;
	a_y[1] = #20000 1'b0;
end 
// a_y[ 0 ]
initial
begin
	a_y[0] = 1'b1;
	a_y[0] = #20000 1'b0;
end 
// b_x[ 3 ]
initial
begin
	b_x[3] = 1'b0;
end 
// b_x[ 2 ]
initial
begin
	b_x[2] = 1'b0;
end 
// b_x[ 1 ]
initial
begin
	b_x[1] = 1'b0;
	b_x[1] = #10000 1'b1;
	b_x[1] = #10000 1'b0;
end 
// b_x[ 0 ]
initial
begin
	b_x[0] = 1'b1;
	b_x[0] = #10000 1'b0;
end 
// b_y[ 3 ]
initial
begin
	b_y[3] = 1'b1;
	b_y[3] = #10000 1'b0;
end 
// b_y[ 2 ]
initial
begin
	b_y[2] = 1'b1;
	b_y[2] = #20000 1'b0;
end 
// b_y[ 1 ]
initial
begin
	b_y[1] = 1'b0;
	b_y[1] = #10000 1'b1;
	b_y[1] = #10000 1'b0;
end 
// b_y[ 0 ]
initial
begin
	b_y[0] = 1'b0;
end 
// c_x[ 3 ]
initial
begin
	c_x[3] = 1'b0;
end 
// c_x[ 2 ]
initial
begin
	c_x[2] = 1'b0;
end 
// c_x[ 1 ]
initial
begin
	c_x[1] = 1'b1;
	c_x[1] = #10000 1'b0;
end 
// c_x[ 0 ]
initial
begin
	c_x[0] = 1'b1;
	c_x[0] = #10000 1'b0;
end 
// c_y[ 3 ]
initial
begin
	c_y[3] = 1'b0;
	c_y[3] = #10000 1'b1;
	c_y[3] = #10000 1'b0;
end 
// c_y[ 2 ]
initial
begin
	c_y[2] = 1'b1;
	c_y[2] = #10000 1'b0;
end 
// c_y[ 1 ]
initial
begin
	c_y[1] = 1'b1;
	c_y[1] = #20000 1'b0;
end 
// c_y[ 0 ]
initial
begin
	c_y[0] = 1'b0;
end 
// d_x[ 3 ]
initial
begin
	d_x[3] = 1'b1;
	d_x[3] = #20000 1'b0;
end 
// d_x[ 2 ]
initial
begin
	d_x[2] = 1'b0;
	d_x[2] = #10000 1'b1;
	d_x[2] = #10000 1'b0;
end 
// d_x[ 1 ]
initial
begin
	d_x[1] = 1'b1;
	d_x[1] = #20000 1'b0;
end 
// d_x[ 0 ]
initial
begin
	d_x[0] = 1'b0;
end 
// d_y[ 3 ]
initial
begin
	d_y[3] = 1'b0;
end 
// d_y[ 2 ]
initial
begin
	d_y[2] = 1'b0;
	d_y[2] = #10000 1'b1;
	d_y[2] = #10000 1'b0;
end 
// d_y[ 1 ]
initial
begin
	d_y[1] = 1'b0;
	d_y[1] = #10000 1'b1;
	d_y[1] = #10000 1'b0;
end 
// d_y[ 0 ]
initial
begin
	d_y[0] = 1'b0;
end 

HW3_Shoot_Darts_vlg_sample_tst tb_sample (
	.a_x(a_x),
	.a_y(a_y),
	.b_x(b_x),
	.b_y(b_y),
	.c_x(c_x),
	.c_y(c_y),
	.d_x(d_x),
	.d_y(d_y),
	.sampler_tx(sampler)
);

HW3_Shoot_Darts_vlg_check_tst tb_out(
	.A_s(A_s),
	.B_s(B_s),
	.C_s(C_s),
	.D_s(D_s),
	.Maxs(Maxs),
	.sampler_rx(sampler)
);
endmodule

